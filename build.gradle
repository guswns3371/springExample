buildscript {
    // ext 키워드 : build.gradle 에서 사용하는 전역변수를 설정한다
    ext {
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    // 플러그인의 버젼을 명시해줘야 한다.
//    id 'org.springframework.boot' version '2.2.1.RELEASE'
//    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
//    id 'java'
//    id 'eclipse'

    // jenkins 에서 ./gradlew docker 혹은 dockerRun 이라는 task 를 실행하기위해 필요한 플러그인들
    id 'com.palantir.docker' version '0.25.0'
    id "com.palantir.docker-run" version "0.22.1"
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'org.example'
version '1.0-SNAPSHOT'

// repositories : 각종 의존성(라이브러리)들을 어떤 원격 저장소에서 받을지 정한다.
repositories {
    // mavenCentral : 이전부터 많이 사용하는 저장소. 개발자들이 직접 만든 라이버리를 업로드하는 과정이 힘들어 점차 공유가 안되는 문제점발생
    // jcenter : 그러한 문제점을 개선하여 라이브러리 업로드를 간단하게 함
    mavenCentral()
    jcenter()
}

// dependencies : 개발에 필요한 의존성을 선언하는 곳
// 특정 버전을 명시하지 않아야만 맨위에 작성한 버전을 따라가게된다(springBootVersion)
// 그레이들 변경시 import 해줘야 한다. (오른쪽 Gradle 탭에서 받은 의존성을 확인할 수 있다.)
dependencies {
    implementation 'junit:junit:4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    compile('org.springframework.boot:spring-boot-starter-web')
    testCompile('org.springframework.boot:spring-boot-starter-test')

    // lombok
    // annotationProcessor : gradle 버전이 올라감에 따라 롬복설정이 변하였기에 설정해준다.
    annotationProcessor("org.projectlombok:lombok")
    compile('org.projectlombok:lombok')

    // mysql
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.15'

    // spring data JPA
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('com.h2database:h2')

    // mustache
    compile('org.springframework.boot:spring-boot-starter-mustache')
}
// id 'com.palantir.docker' 플러그인을 추가하면 반드시 docker{}를 명시해줘야 빌드테스트 오류가 나지 않는다.
// id "com.palantir.docker-run" 도 마찬가지로 dockerRun{}을 명시해줘야 한다.
// docker 설치 후 /var/run/docker.sock 의 permission denied 발생하는 경우 : "sudo chmod 666 /var/run/docker.sock" 명령어를 실행해줘야 한다.
docker {
    println("gradle docker-plugin start = spring-example:${project.version}")
    name "spring-example:${project.version}"
    files tasks.bootJar.outputs.files
    // 도커에서 repository 이름은 반드시 소문자이여야 하므로 springExample 이 아닌 spring-example 이여야한다.
    tag 'DockerHub', "guswns3371/spring-example:${project.version}"
    buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
}

dockerRun {
    println("gradle dockerRun-plugin start")
    name "${project.name}"
    image "${project.name}:${project.version}"
    ports '80:80'
    clean true
}

test {
    useJUnitPlatform()
}

